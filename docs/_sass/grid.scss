/* ----------------- */
/* Responsive Styles */
/* ----------------- */

$min-width-tablet: 768px;
$min-width-desktop: 980px;

/* Phones */
@media (max-width: ($min-width-tablet - 1)) {
  .phone-hidden, .tablet-visible, .desktop-visible {
    display: none;
  }
}

/* Tablets */
@media (min-width: $min-width-tablet) and (max-width: ($min-width-desktop - 1)) {
  .phone-visible, .tablet-hidden, .desktop-visible {
    display: none;
  }
}

/* Desktops */
@media (min-width: $min-width-desktop) {
  .phone-visible, .tablet-visible, .desktop-hidden {
    display: none;
  }
}

/* --------------- */
/* Fluid container */
/* --------------- */

/* A container (and its padding) will not grow larger than this width. */
$container-max-width: 768px;

/* The horizontal padding around containers on medium to large screens. */
$container-gutter-non-phone: 32px;

/* The horizontal padding around containers on small screens. */
$container-gutter-phone: 20px;

/* Add the "container" class to a block element (e.g., a div) to create a fluid container. */
.container {
  width: 100%;
  max-width: $container-max-width;
  padding-left:  $container-gutter-non-phone;
  padding-right: $container-gutter-non-phone;
  -webkit-box-sizing: border-box;
  -moz-box-sizing:    border-box;
  box-sizing:         border-box;
  margin-left:  auto;
  margin-right: auto;

  @media (max-width: ($min-width-tablet - 1)) {
    padding-left:  $container-gutter-phone;
    padding-right: $container-gutter-phone;
  }
}

/* ---------------------- */
/* Responsive Grid Layout */
/* ---------------------- */

/* The spacing between columns. */
$column-gutter-width: 4%;

/* The number of columns in a row. */
$num-columns: 12;

/* Columns will stack on screens less than this wide. */
$stack-width: 768px;

/* Columns must be put in an element with the "row" class. */
.row {
  &:before, &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

/* Inside a ".row", add ".spanX" elements to fill the grid, where X is the number of columns to span. */
/* Add ".offsetX" to ".spanX" elements to skip X columns of empty space. */
@for $i from 1 through $num-columns {
  .span#{$i} {
    float: left;
    &:before, &:after {
      display: table;
      content: "";
    }
    &:after {
      clear: both;
    }
  }
}

@for $i from 1 through $num-columns {
  .row > .span#{$i} {
    width: (100% + $column-gutter-width) * ($i / $num-columns) - $column-gutter-width;
    margin-left: $column-gutter-width;
    &:first-child {
      margin-left: 0;
    }
  }
}

@for $i from 1 through $num-columns {
  .row > .offset#{$i} {
    margin-left: $column-gutter-width + (100% + $column-gutter-width) * ($i / $num-columns);
    &:first-child {
      margin-left: (100% + $column-gutter-width) * ($i / $num-columns);
    }
  }
}

@for $i from 1 through $num-columns {
  @for $j from 1 through ($i - 1) {
    .span#{$i} > .span#{$j} {
      $scale_factor: 100% / ((100% + $column-gutter-width) * ($i / $num-columns) - $column-gutter-width);
      width: ((100% + $column-gutter-width) * ($j / $num-columns) - $column-gutter-width) * $scale_factor;
      margin-left: $column-gutter-width * $scale_factor;
      &:first-child {
        margin-left: 0;
      }
    }
  }
}

@for $i from 1 through $num-columns {
  @for $j from 1 through ($i - 1) {
    .span#{$i} > .offset#{$j} {
      $scale_factor: 100% / ((100% + $column-gutter-width) * ($i / $num-columns) - $column-gutter-width);
      margin-left: ($column-gutter-width + (100% + $column-gutter-width) * ($j / $num-columns)) * $scale_factor;
      &:first-child {
        margin-left: (100% + $column-gutter-width) * ($j / $num-columns) * $scale_factor;
      }
    }
  }
}

/* Stack the grid on small displays. */
@media (max-width: ($stack-width - 1)) {
  @for $i from 1 through $num-columns {
    .span#{$i} {
      margin-top: inherit;
      margin-bottom: inherit;
      &:first-child {
        margin-top: 0;
      }
      &:last-child {
        margin-bottom: 0;
      }
    }
  }

  @for $i from 1 through $num-columns {
    .row > .span#{$i} {
      width: 100%;
      margin-left: 0;
    }
  }

  @for $i from 1 through $num-columns {
    .row > .offset#{$i} {
      margin-left: 0;
      &:first-child {
        margin-left: 0;
      }
    }
  }

  @for $i from 1 through $num-columns {
    @for $j from 1 through ($i - 1) {
      .span#{$i} > .span#{$j} {
        width: 100%;
        margin-left: 0;
      }
    }
  }

  @for $i from 1 through $num-columns {
    @for $j from 1 through ($i - 1) {
      .span#{$i} > .offset#{$j} {
        margin-left: 0;
        &:first-child {
          margin-left: 0;
        }
      }
    }
  }
}
