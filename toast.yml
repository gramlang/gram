image: ubuntu:19.10
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      apt-get install --yes bison build-essential curl ripgrep shellcheck

  install_tagref:
    dependencies:
      - install_packages
    command: |
      set -euo pipefail
      curl https://raw.githubusercontent.com/stepchowfun/tagref/master/install.sh -LSfs |
        VERSION=1.2.1 sh

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_rust:
    dependencies:
      - install_packages
      - create_user
    user: user
    command: |
      set -euo pipefail
      curl https://sh.rustup.rs -sSf |
        sh -s -- -y --default-toolchain 1.41.1
      . $HOME/.cargo/env
      rustup component add clippy
      rustup component add rustfmt
      rm -rf "$(dirname "$(rustup which rustc)")/../share"

  install_tools:
    dependencies:
      - install_rust
      - install_tagref

  fetch_crates:
    dependencies:
      - install_tools
    input_paths:
      - Cargo.lock
      - Cargo.toml
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      mv Cargo.lock Cargo.lock.og
      mv Cargo.toml Cargo.toml.og
      cargo init --vcs none
      mv Cargo.lock.og Cargo.lock
      mv Cargo.toml.og Cargo.toml
      cargo build
      cargo clean --package gram
      cargo build --release
      cargo clean --release --package gram
      cargo clippy
      rm -rf src

  build:
    dependencies:
      - fetch_crates
    input_paths:
      - src
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      cargo build

  test:
    dependencies:
      - build
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      cargo test

  lint:
    dependencies:
      - build
    input_paths:
      - .ignore # Used by `tagref`
      - grammar.y # Checked by `bison` for shift/reduce and reduce/reduce conflicts
      - install.sh # Linted by ShellCheck
      - release.sh # Linted by ShellCheck
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env

      # Lint Rust files.
      cargo clippy --all-targets --all-features -- \
        --deny warnings --deny clippy::all --deny clippy::pedantic

      # Check code formatting.
      cargo fmt --all -- --check

      # Check references.
      tagref

      # Lint shell files.
      shellcheck install.sh release.sh

      # Check that the grammar is unambiguous.
      bison --verbose --report=itemset --report=lookahead --warnings=all -Werror grammar.y || \
        (cat grammar.output && false)
      rm grammar.output grammar.tab.c

      # Enforce that lines span no more than 100 columns.
      if rg --type rust '.{101}'; then
        echo "There are lines spanning more than 100 columns." >&2
        exit 1
      fi

      # Enforce trailing commas in multi-line sequences.
      if rg --multiline --type rust '[^,]\n(\s*)\)'; then
        echo "There are multi-line sequences without trailing commas." >&2
        exit 1
      fi

      # Forbid trailing commas in single-line sequences.
      if rg --type rust '[^(],\s*\)'; then
        echo "There are single-line sequences with trailing commas." >&2
        exit 1
      fi

  run:
    dependencies:
      - build
    user: user
    input_paths:
      - examples
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      for file in examples/*.g; do
        echo "Running $file..."
        if [ "$file" = 'examples/girard.g' ]; then
          if timeout 5 cargo run -- "$file"; then
            echo 'This example was supposed to time out.' >&2
            exit 1
          else
            if [ "$?" -ne 124 ]; then
              echo 'This example was supposed to time out.' >&2
              exit 1
            fi
          fi
        else
          cargo run -- "$file"
        fi
      done

  check:
    dependencies:
      - fetch_crates
    input_paths:
      - src
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      find src -type f -name '*.rs' -exec touch {} +
      cargo check

  format:
    dependencies:
      - fetch_crates
    input_paths:
      - src
    output_paths:
      - src
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      cargo fmt --all

  release:
    dependencies:
      - fetch_crates
    input_paths:
      - src
    output_paths:
      - artifacts
    user: user
    command: |
      set -euo pipefail
      . $HOME/.cargo/env
      cargo build --release
      mkdir artifacts
      sha256sum --binary target/release/gram
      cp target/release/gram artifacts/gram-x86_64-unknown-linux-gnu
